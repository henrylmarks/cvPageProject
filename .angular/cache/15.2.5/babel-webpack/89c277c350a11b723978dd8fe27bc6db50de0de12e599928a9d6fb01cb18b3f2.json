{"ast":null,"code":"import { startWith, Subject } from \"rxjs\";\nimport cvData from '../../cvData.json';\nimport * as i0 from \"@angular/core\";\nexport class DataService {\n  constructor() {\n    this._sectionData = [];\n    this._cvSectionSubject = new Subject();\n    this._cvData = cvData;\n    this._sectionData = this._cvData.sections;\n    this.cvSections$ = this._cvSectionSubject.asObservable().pipe(startWith(this._sectionData));\n  }\n  getProfile() {\n    return this._cvData.profile;\n  }\n  filterData(filters) {\n    if (!filters.length) {\n      this._cvSectionSubject.next(this._sectionData);\n      return;\n    }\n    const filteredResults = this._sectionData.map(section => {\n      return {\n        ...section,\n        data: section.data.map(summary => {\n          const detailList = summary.detailList?.filter(detail => detail.tags.some(tag => filters.includes(tag)));\n          return {\n            ...summary,\n            detailList\n          };\n        })\n      };\n    });\n    this._cvSectionSubject.next(filteredResults);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)();\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAoBA,SAAS,EAAEC,OAAO,QAAO,MAAM;AAEnD,OAAOC,MAAM,MAAM,mBAAmB;;AAKtC,OAAM,MAAOC,WAAW;EAOtBC;IANQ,iBAAY,GAAwB,EAAE;IACtC,sBAAiB,GAAiC,IAAIH,OAAO,EAAuB;IAM1F,IAAI,CAACI,OAAO,GAAGH,MAAM;IACrB,IAAI,CAACI,YAAY,GAAG,IAAI,CAACD,OAAO,CAACE,QAAQ;IACzC,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,iBAAiB,CAACC,YAAY,EAAE,CAACC,IAAI,CAACX,SAAS,CAAC,IAAI,CAACM,YAAY,CAAC,CAAC;EAE7F;EAEOM,UAAU;IACf,OAAO,IAAI,CAACP,OAAO,CAACQ,OAAO;EAC7B;EAEOC,UAAU,CAACC,OAAsB;IACtC,IAAI,CAACA,OAAO,CAACC,MAAM,EAAE;MACnB,IAAI,CAACP,iBAAiB,CAACQ,IAAI,CAAC,IAAI,CAACX,YAAY,CAAC;MAC9C;;IAEF,MAAMY,eAAe,GAAwB,IAAI,CAACZ,YAAY,CAACa,GAAG,CAAEC,OAAqB,IAAI;MAC3F,OAAO;QACL,GAAGA,OAAO;QACVC,IAAI,EAAED,OAAO,CAACC,IAAI,CAACF,GAAG,CAAEG,OAAiB,IAAI;UAC3C,MAAMC,UAAU,GAA+BD,OAAO,CAACC,UAAU,EAAEC,MAAM,CAAEC,MAAe,IAAKA,MAAM,CAACC,IAAI,CAACC,IAAI,CAAEC,GAAW,IAAKb,OAAO,CAACc,QAAQ,CAACD,GAAG,CAAC,CAAC,CAAC;UACxJ,OAAO;YACL,GAAGN,OAAO;YACVC;WACD;QACH,CAAC;OACF;IACH,CAAC,CAAC;IAEF,IAAI,CAACd,iBAAiB,CAACQ,IAAI,CAACC,eAAe,CAAC;EAC9C;;AArCWf,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YAFV;AAAM","names":["startWith","Subject","cvData","DataService","constructor","_cvData","_sectionData","sections","cvSections$","_cvSectionSubject","asObservable","pipe","getProfile","profile","filterData","filters","length","next","filteredResults","map","section","data","summary","detailList","filter","detail","tags","some","tag","includes","factory","providedIn"],"sourceRoot":"","sources":["/Users/henrymarks/WebstormProjects/cvPage/src/app/services/data.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable, startWith, Subject} from \"rxjs\";\nimport {ICvData, IDetail, IProfile, ISectionData, ISummary} from \"../interfaces/cv-interfaces\";\nimport cvData from '../../cvData.json'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private _sectionData: Array<ISectionData> = []\n  private _cvSectionSubject: Subject<Array<ISectionData>> = new Subject<Array<ISectionData>>()\n  private _cvData: ICvData;\n\n  public cvSections$: Observable<Array<ISectionData>>\n\n  constructor() {\n    this._cvData = cvData;\n    this._sectionData = this._cvData.sections\n    this.cvSections$ = this._cvSectionSubject.asObservable().pipe(startWith(this._sectionData));\n\n  }\n\n  public getProfile(): IProfile {\n    return this._cvData.profile\n  }\n\n  public filterData(filters: Array<string>): void {\n    if (!filters.length) {\n      this._cvSectionSubject.next(this._sectionData);\n      return\n    }\n    const filteredResults: Array<ISectionData> = this._sectionData.map((section: ISectionData) => {\n      return {\n        ...section,\n        data: section.data.map((summary: ISummary) => {\n          const detailList: Array<IDetail> | undefined = summary.detailList?.filter((detail: IDetail) => detail.tags.some((tag: string) => filters.includes(tag)))\n          return {\n            ...summary,\n            detailList\n          }\n        })\n      }\n    })\n\n    this._cvSectionSubject.next(filteredResults)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}